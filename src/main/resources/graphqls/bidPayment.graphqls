extend type Query {
	# for stripe
	getStripeAuctionTxByRound(
		roundId: String!
	) : [StripeAuctionTransaction]
	getStripeAuctionTxByUser
	 : [StripeAuctionTransaction]
	getStripeAuctionTxByAdmin(
		 userId: String!
	) : [StripeAuctionTransaction]
	getStripeAuctionTx(
		roundId: String!,
	) : [StripeAuctionTransaction]
	getStripeAuctionTxForRoundByAdmin(
		roundId: String!,
		userId: String
	) : [StripeAuctionTransaction]
	
	# for coinpayment
    getCryptoAuctionTxById(
		id: Int!
	) : CoinpaymentDepositTransaction
	getCryptoAuctionTxByUser 
	  : [CoinpaymentDepositTransaction]
	getCryptoAuctionTxByAdmin(
		userId: Int!
	) : [CoinpaymentDepositTransaction]
	getCryptoAuctionTxByRound(
		roundId: Int!
	) : [CoinpaymentDepositTransaction]
	getCryptoAuctionTx(
		roundId: Int!,
	) : [CoinpaymentDepositTransaction]
	getCryptoAuctionTxPerRoundByAdmin(
		roundId: Int!,
		userId: Int
	) : [CoinpaymentDepositTransaction]
	
	# for paypal
	getAllPaypalAuctionTxns(
		orderBy: String
	) : [PaypalAuctionTransaction]
	getPaypalAuctionTxnsByUser(
		orderBy: String
	) : [PaypalAuctionTransaction]
	getPaypalAuctionTxn(
		id: Int
	) : PaypalAuctionTransaction
}

extend type Mutation {
    payStripeForAuction (
		roundId: Int,
		amount: Float,
		fiatAmount: Float,
		fiatType: String,
		paymentIntentId: String,
		paymentMethodId: String,
		isSaveCard: Boolean
	) : PayResponse!
	payStripeForAuctionWithSavedCard (
		roundId: Int,
		amount: Float,
		fiatAmount: Float,
		fiatType: String,
		cardId: Int,
		paymentIntentId: String
	) : PayResponse!
    
	createCryptoPaymentForAuction(
		roundId: Int!,
		cryptoType: String,
		network: String,
		coin: String!
	) : CoinpaymentDepositTransaction
	
	
	paypalForAuction(
		roundId: Int,
		currencyCode: String,
	) : OrderResponseDTO
	captureOrderForAuction(
		orderId: String
	) : Boolean
	payWalletForAuction(
		roundId: Int,
		cryptoType: String
	) : Int
}

schema {
   query: Query,
   mutation: Mutation
} 