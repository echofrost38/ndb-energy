package com.ndb.auction.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class NDBcoin extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50614592806100206000396000f3fe6080604052600436106200039a5760003560e01c8063893d20e811620001eb578063d7c01032116200010b578063f1f3bca311620000a1578063f84ba65d1162000078578063f84ba65d1462000a9c578063f887ea401462000ac1578063f8c8765e1462000ae3578063fe9fbb801462000b0857600080fd5b8063f1f3bca31462000a2d578063f5cfec0a1462000a52578063f708a64f1462000a7757600080fd5b8063df20fd4911620000e2578063df20fd49146200099b578063e91f214e14620009c0578063e96fada214620009e6578063f0b37c041462000a0857600080fd5b8063d7c010321462000914578063d806d12f1462000939578063dd62ed3e146200095157600080fd5b8063b210b06d1162000181578063c6d2577d1162000158578063c6d2577d1462000893578063ca33e64c14620008ab578063cd82fccb14620008cd578063d04cbfb414620008ef57600080fd5b8063b210b06d146200083e578063b6a5d7de1462000856578063bf56b371146200087b57600080fd5b80639d1944f511620001c25780639d1944f514620007b0578063a51af4c514620007d5578063a8aa1b3114620007f7578063a9059cbb146200081957600080fd5b8063893d20e8146200076e5780638dd95002146200078e57806395d89b41146200043657600080fd5b8063313ce56711620002d75780636ddd1713116200026d57806379ba5097116200024457806379ba509714620006eb5780637d1db4a5146200070357806384b1d1ef146200071b57806388e765ff146200075657600080fd5b80636ddd1713146200067d57806370a082311462000699578063715018a614620006d357600080fd5b8063571ac8b011620002ae578063571ac8b014620005f65780635c85974f146200061b578063658d4b7f146200064057806366d602ae146200066557600080fd5b8063313ce56714620005975780633bb8a8d414620005b557806352c043c114620005d157600080fd5b806318160ddd116200034d57806323b872dd116200032457806323b872dd14620005025780632b112e4914620005275780632d48e896146200053f5780632f54bf6e146200056457600080fd5b806318160ddd14620004a1578063201e799114620004b85780632375ce4014620004dd57600080fd5b806301339c2114620003a75780630445b66714620003c1578063048c7baf14620003ec57806304a66b48146200041157806306fdde031462000436578063095ea7b3146200046b57600080fd5b36620003a257005b600080fd5b348015620003b457600080fd5b50620003bf62000b2d565b005b348015620003ce57600080fd5b50620003d9602e5481565b6040519081526020015b60405180910390f35b348015620003f957600080fd5b50620003bf6200040b366004620030c3565b62000bf7565b3480156200041e57600080fd5b50620003bf62000430366004620030ff565b62000c97565b3480156200044357600080fd5b50604080518082018252600381526227222160e91b60208201529051620003e391906200313b565b3480156200047857600080fd5b50620004906200048a366004620031ac565b62000da9565b6040519015158152602001620003e3565b348015620004ae57600080fd5b50600554620003d9565b348015620004c557600080fd5b50620003bf620004d7366004620031db565b62000e17565b348015620004ea57600080fd5b50620003bf620004fc366004620031fe565b62000ee6565b3480156200050f57600080fd5b5062000490620005213660046200322b565b62000fc6565b3480156200053457600080fd5b50620003d96200108e565b3480156200054c57600080fd5b50620003bf6200055e366004620031db565b62001103565b3480156200057157600080fd5b50620004906200058336600462003271565b6000546001600160a01b0391821691161490565b348015620005a457600080fd5b50604051600c8152602001620003e3565b348015620005c257600080fd5b50602354620004909060ff1681565b348015620005de57600080fd5b50620003bf620005f036600462003271565b62001198565b3480156200060357600080fd5b50620004906200061536600462003271565b6200120f565b3480156200062857600080fd5b50620003bf6200063a36600462003291565b6200121f565b3480156200064d57600080fd5b50620003bf6200065f366004620032ab565b620012e8565b3480156200067257600080fd5b50620003d9601e5481565b3480156200068a57600080fd5b50602d54620004909060ff1681565b348015620006a657600080fd5b50620003d9620006b836600462003271565b6001600160a01b031660009081526007602052604090205490565b348015620006e057600080fd5b50620003bf6200136f565b348015620006f857600080fd5b50620003bf62001410565b3480156200071057600080fd5b50620003d960065481565b3480156200072857600080fd5b506016546200073d906001600160a01b031681565b6040516001600160a01b039091168152602001620003e3565b3480156200076357600080fd5b50620003d9601d5481565b3480156200077b57600080fd5b506000546001600160a01b03166200073d565b3480156200079b57600080fd5b506004546200073d906001600160a01b031681565b348015620007bd57600080fd5b50620003bf620007cf36600462003291565b62001521565b348015620007e257600080fd5b50602b546200073d906001600160a01b031681565b3480156200080457600080fd5b50601a546200073d906001600160a01b031681565b3480156200082657600080fd5b506200049062000838366004620031ac565b620015c3565b3480156200084b57600080fd5b50620003bf620015db565b3480156200086357600080fd5b50620003bf6200087536600462003271565b6200163d565b3480156200088857600080fd5b50620003d9601b5481565b348015620008a057600080fd5b50620003d9601c5481565b348015620008b857600080fd5b506014546200073d906001600160a01b031681565b348015620008da57600080fd5b506013546200073d906001600160a01b031681565b348015620008fc57600080fd5b50620003bf6200090e366004620032ab565b620016c1565b3480156200092157600080fd5b50620003bf62000933366004620032e5565b62001748565b3480156200094657600080fd5b50620003d9620017ef565b3480156200095e57600080fd5b50620003d96200097036600462003337565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b348015620009a857600080fd5b50620003bf620009ba36600462003375565b620018d9565b348015620009cd57600080fd5b50620003d96fffffffffffffffffffffffffffffffff81565b348015620009f357600080fd5b506015546200073d906001600160a01b031681565b34801562000a1557600080fd5b50620003bf62000a2736600462003271565b62001956565b34801562000a3a57600080fd5b50620003d962000a4c36600462003394565b620019db565b34801562000a5f57600080fd5b50620003bf62000a71366004620033b2565b62001a1e565b34801562000a8457600080fd5b50620003bf62000a96366004620032ab565b62001ad0565b34801562000aa957600080fd5b50620003bf62000abb366004620032ab565b62001cba565b34801562000ace57600080fd5b506019546200073d906001600160a01b031681565b34801562000af057600080fd5b50620003bf62000b02366004620033d8565b62001d41565b34801562000b1557600080fd5b506200049062000b2736600462003271565b62002421565b62000b383362002421565b62000b605760405162461bcd60e51b815260040162000b57906200343d565b60405180910390fd5b601b541562000ba95760405162461bcd60e51b8152602060048201526014602482015273416c7265616479206c61756e6368656420626f6960601b604482015260640162000b57565b43601b81905542601c8190556040517fa4eda92a9703eeccb36fbed43c5cfce0e180464bf695e806d3bd0e439743fd569262000bed92908252602082015260400190565b60405180910390a1565b62000c023362002421565b62000c215760405162461bcd60e51b815260040162000b57906200343d565b6023805460ff191685151590811790915560258490556000602655602783905560288290554360295560408051918252602082018590528101839052606081018290527f1b8ced33f4b3c14da2a89db9167ac597066508057af0faf70ff9a0bd55bce8f39060800160405180910390a150505050565b62000ca23362002421565b62000cc15760405162461bcd60e51b815260040162000b57906200343d565b600d859055600e849055600f839055601082905562000cef8262000ce8858189896200243f565b906200243f565b601155601281905562000d0460048262003478565b6011541062000d4a5760405162461bcd60e51b8152602060048201526011602482015270746f74616c20666565206578636565647360781b604482015260640162000b57565b600d54600e54600f54601254604080519485526020850193909352918301526060820184905260808201527f881c278b86ef48391462a184ea0f2a579fec4c752524d2982eb0e2c9a956b7a39060a00160405180910390a15050505050565b3360008181526008602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259062000e059086815260200190565b60405180910390a35060015b92915050565b62000e223362002421565b62000e415760405162461bcd60e51b815260040162000b57906200343d565b62000e4e8160026200244d565b821062000e9e5760405162461bcd60e51b815260206004820152601760248201527f746172676574206973206f7665726c6971756966696564000000000000000000604482015260640162000b57565b6017829055601881905560408051838152602081018390527f61b037fbf40888c3d344a3dfa6986a7d511feda40cac15b93162e3e21713aed691015b60405180910390a15050565b62000ef13362002421565b62000f105760405162461bcd60e51b815260040162000b57906200343d565b600262000f1e838562003478565b1115801562000f2c57508183115b62000f725760405162461bcd60e51b81526020600482015260156024820152746e756d657261746f72206973206f766572666c6f7760581b604482015260640162000b57565b601f839055602082815560228290556040805185815291820184905281018290527fc8716d253f9ba4c44e0c96c044c56034c170c5d7a6f64522295a2c37119d94d0906060015b60405180910390a1505050565b6005546001600160a01b038416600090815260086020908152604080832033845290915281205490911462001078576040805180820182526016815275496e73756666696369656e7420416c6c6f77616e636560501b6020808301919091526001600160a01b0387166000908152600882528381203382529091529190912054620010539184906200245b565b6001600160a01b03851660009081526008602090815260408083203384529091529020555b62001086338585856200248a565b949350505050565b60076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df5461dead60009081527fb0c2646e02af70b79e3fe9277b98373379f54150e4e26b2b5650139f7a75a65d546005549192620010fe929091620010f7919062002921565b9062002921565b905090565b6200110e3362002421565b6200112d5760405162461bcd60e51b815260040162000b57906200343d565b602a546040516316a4744b60e11b815260048101849052602481018390526001600160a01b0390911690632d48e89690604401600060405180830381600087803b1580156200117b57600080fd5b505af115801562001190573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03163314620011c55760405162461bcd60e51b815260040162000b57906200349b565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce2290600090a250565b600062000e118260055462000da9565b6200122a3362002421565b620012495760405162461bcd60e51b815260040162000b57906200343d565b6103e86005546200125b919062003478565b811015620012ac5760405162461bcd60e51b815260206004820181905260248201527f7472616e73616374696f6e20616d6f756e742065786365656473206c696d6974604482015260640162000b57565b60068190556040518181527f0908917ea7a6e134d05135241f8d5a4eaa81dd074e9dd7f36cca8b5ea003bde1906020015b60405180910390a150565b620012f33362002421565b620013125760405162461bcd60e51b815260040162000b57906200343d565b6001600160a01b038216600081815260096020908152604091829020805460ff19168515159081179091558251938452908301527f1b92447bfc74f86a82293c184341926a5888220bc498dde33efabf7c3d796d69910162000eda565b6000546001600160a01b031633146200139c5760405162461bcd60e51b815260040162000b57906200349b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b03168152600160205260408120805460ff1916905580546001600160a01b0319908116909155600280549091169055565b6002546001600160a01b03163314620014a35760405162461bcd60e51b815260206004820152604860248201527f596f75206d757374206265206e6f6d696e6174656420617320706f74656e746960448201527f616c206f776e6572206265666f726520796f752063616e20616363657074206f6064820152670776e6572736869760c41b608482015260a40162000b57565b600254600080546040516001600160a01b0393841693909116917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a3600080546001600160a01b039081168252600160205260408220805460ff191690556002805483549281166001600160a01b03199384161790935591169055565b6200152c3362002421565b6200154b5760405162461bcd60e51b815260040162000b57906200343d565b620b71b081106200158d5760405162461bcd60e51b815260206004820152600b60248201526a676173206578636565647360a81b604482015260640162000b57565b602c8190556040518181527f0ac490767124c3ed3e591404033136400e1fcd55d8be80510b0407f792c68b0990602001620012dd565b6000620015d460003385856200248a565b9392505050565b620015e63362002421565b620016055760405162461bcd60e51b815260040162000b57906200343d565b600060218190556040519081527fcca13ebd698a87c405f046400a38f9b8b06afccf3ad995b1f694cdd8aff870a49060200162000bed565b6000546001600160a01b031633146200166a5760405162461bcd60e51b815260040162000b57906200349b565b6001600160a01b038116600081815260016020818152604092839020805460ff19168317905582519384528301527fcea19d7e74d2901bed6a09d188b76bf13520e4d6361466d6ba67872151fd09ab9101620012dd565b620016cc3362002421565b620016eb5760405162461bcd60e51b815260040162000b57906200343d565b6001600160a01b0382166000818152600c6020908152604091829020805460ff19168515159081179091558251938452908301527f1b26f3a819787901b4864d032445a54e683770463fa429004eb7aab38eec8e6a910162000eda565b620017533362002421565b620017725760405162461bcd60e51b815260040162000b57906200343d565b601480546001600160a01b038581166001600160a01b0319928316811790935560158054868316908416811790915560168054928616929093168217909255604080519384526020840192909252908201527fb923dcdfa226a9163e9324bacc07634c44fc26e1268f8341bc0989d83f4794b89060600162000fb9565b600042601c5462015180620018059190620034bb565b11156200183357620010fe6012546200182c6146506011546200244d90919063ffffffff16565b906200292f565b426200184d6022546021546200243f90919063ffffffff16565b1115620018d25760006200187442620010f76022546021546200243f90919063ffffffff16565b905060006200189f601154620010f76020546200182c601f546011546200244d90919063ffffffff16565b9050620018cb620018c16022546200182c85856200244d90919063ffffffff16565b601154906200243f565b9250505090565b5060115490565b620018e43362002421565b620019035760405162461bcd60e51b815260040162000b57906200343d565b602d805460ff1916831515908117909155602e8290556040805160ff90921615158252602082018390527f87648e954f6c9d5f5f7ddeb39f95ca8f7d2c14cbb2f190d5250f9b6eb04dd934910162000eda565b6000546001600160a01b03163314620019835760405162461bcd60e51b815260040162000b57906200349b565b6001600160a01b0381166000818152600160209081526040808320805460ff191690558051938452908301919091527fcea19d7e74d2901bed6a09d188b76bf13520e4d6361466d6ba67872151fd09ab9101620012dd565b600043601b546001620019ef9190620034bb565b1062001a055760125462000e1190600162002921565b811562001a165762000e11620017ef565b505060115490565b62001a293362002421565b62001a485760405162461bcd60e51b815260040162000b57906200343d565b62001a568261dead6200293d565b801562001a9857426021556022546040519081527f39d2389ec5c1fa77b2c0d374bc61b6d7bd97ccba280fcdeb4e9c7644898d7c3a9060200160405180910390a15b6040805183815282151560208201527f64b64e24e95ff3b681d7e6f5a5ce4d5fa557bc2f47543be9645e18ff3c68963a910162000eda565b62001adb3362002421565b62001afa5760405162461bcd60e51b815260040162000b57906200343d565b6001600160a01b038216301480159062001b225750601a546001600160a01b03838116911614155b62001b645760405162461bcd60e51b81526020600482015260116024820152701a1bdb19195c881a5cc81a5b9d985b1a59607a1b604482015260640162000b57565b6001600160a01b0382166000908152600b60205260409020805460ff1916821580159190911790915562001c0057602a54604051630a5b654b60e11b81526001600160a01b03848116600483015260006024830152909116906314b6ca9690604401600060405180830381600087803b15801562001be157600080fd5b505af115801562001bf6573d6000803e3d6000fd5b5050505062001c79565b602a546001600160a01b0383811660008181526007602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca9690604401600060405180830381600087803b15801562001c5f57600080fd5b505af115801562001c74573d6000803e3d6000fd5b505050505b604080516001600160a01b038416815282151560208201527fad3666dd545175260bd4a82a50e0b189b968d227adfefd0df46a3e2fa2d5eafe910162000eda565b62001cc53362002421565b62001ce45760405162461bcd60e51b815260040162000b57906200343d565b6001600160a01b0382166000818152600a6020908152604091829020805460ff19168515159081179091558251938452908301527f6824b1d87573c276dab7cd55e81d1a9dda557f5deb51bad3c38832e5d1333fba910162000eda565b6001600160a01b03841662001d995760405162461bcd60e51b815260206004820152601960248201527f44455820526f75746572206164647265737320656d7074792e00000000000000604482015260640162000b57565b6001600160a01b03831662001df15760405162461bcd60e51b815260206004820152601860248201527f4d61726b6574696e67206164647265737320656d7074792e0000000000000000604482015260640162000b57565b6001600160a01b03821662001e425760405162461bcd60e51b8152602060048201526016602482015275213abcb130b1b59030b2323932b9b99032b6b83a3c9760511b604482015260640162000b57565b6001600160a01b03811662001e905760405162461bcd60e51b81526020600482015260136024820152722bb0ba3a1030b2323932b9b99032b6b83a3c9760691b604482015260640162000b57565b60148054336001600160a01b0319918216179091556015805482166001600160a01b03868116919091179091556016805483168583161790556013805483169184169190911790556003805473e9e7cea3dedca5984780bafc599bd69add087d56921691909117905562001f07600c600a620035d3565b62001f189064e8d4a51000620035e4565b600581905562001f2b906103206200292f565b60065560055462001f4890620186a0906200182c90607d6200244d565b601e5560055462001f6590620186a0906200182c90607d6200244d565b601d5560c8600d8190556096600e8190556000600f556010556101f4601155612710601255601960175560646018819055601f919091556020556107086022556207a120602c55602d805460ff1916600117905560055462001fca90614e206200292f565b602e55600080546001600160a01b0319908116339081178355825260016020818152604093849020805460ff1916909217909155601980546001600160a01b03891693168317905582516315ab88c960e31b81529251919263ad5c464892600480830193928290030181865afa15801562002049573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200206f919062003606565b600480546001600160a01b0319166001600160a01b039283161781556019546040805163c45a015560e01b81529051919093169263c45a015592818101926020929091908290030181865afa158015620020cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020f3919062003606565b600480546040516364e329cb60e11b81526001600160a01b0391821692810192909252306024830152919091169063c9c65396906044016020604051808303816000875af11580156200214a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002170919062003606565b601a80546001600160a01b0319166001600160a01b0392831617815530600090815260086020908152604080832060195486168452909152808220600019908190559254909316815282902055518490620021cb906200309f565b6001600160a01b039091168152602001604051809103906000f080158015620021f8573d6000803e3d6000fd5b50602a80546001600160a01b039283166001600160a01b03199182168117909255602b80549091169091179055336000818152600960209081526040808320805460ff19908116600190811790925560138054881686528386208054831684179055601a8054891687528487208054841685179055308088528588208054851686179055888852600a875285882080548516861790559154891687528487208054841685179055549097168552600b8452828520805482168317905595845281842080548716821790557f44433eeeda1d04bdae79f62169cdb2ab0a6af287fa15706d3fafdbac5fac341580548716821790559383526024909152902080549092161790556200230b8460001962000da9565b50601a5462002326906001600160a01b031660001962000da9565b506200234c60416200234560646005546200292f90919063ffffffff16565b906200244d565b336000908152600760205260409020556005546200237490602390620023459060646200292f565b6013546001600160a01b03166000908152600760205260408120919091556005543391906000805160206200453d83398151915290620023be90604190620023459060646200292f565b60405190815260200160405180910390a36013546005546001600160a01b03909116906000906000805160206200453d833981519152906200240a90602390620023459060646200292f565b60405190815260200160405180910390a350505050565b6001600160a01b031660009081526001602052604090205460ff1690565b6000620015d48284620034bb565b6000620015d48284620035e4565b60008184841115620024825760405162461bcd60e51b815260040162000b5791906200313b565b505050900390565b6000806001600160a01b03861615620024a45785620024a6565b845b6001600160a01b0386166000908152600c602052604090205490915060ff1615620025055760405162461bcd60e51b815260206004820152600e60248201526d105353109b1858dadb1a5cdd195960921b604482015260640162000b57565b6001600160a01b0384166000908152600c602052604090205460ff1615620025615760405162461bcd60e51b815260206004820152600e60248201526d105353109b1858dadb1a5cdd195960921b604482015260640162000b57565b6200256d858462002ab5565b601a546001600160a01b0390811690861603620025cc57601d54831115620025cc5760405162461bcd60e51b8152602060048201526011602482015270109d5e48195e18d959591cc81b1a5b5a5d607a1b604482015260640162000b57565b601a546001600160a01b03908116908516036200262c57601e548311156200262c5760405162461bcd60e51b815260206004820152601260248201527114d95b1b08195e18d959591cc81b1a5b5a5d60721b604482015260640162000b57565b6200263662002b25565b1562002646576200264662002b77565b6200265062002f49565b1562002660576200266062002faa565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b038816600090815260079091529190912054620026b49185906200245b565b6001600160a01b038616600090815260076020526040812091909155620026f4826001600160a01b031660009081526009602052604090205460ff161590565b6200270057836200270d565b6200270d86868662002feb565b6001600160a01b0386166000908152600760205260409020549091506200273590826200243f565b6001600160a01b038087166000908152600760209081526040808320949094559189168152600b909152205460ff16620027dc57602a546001600160a01b0387811660008181526007602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca9690604401600060405180830381600087803b158015620027c857600080fd5b505af1925050508015620027da575060015b505b6001600160a01b0385166000908152600b602052604090205460ff166200287057602a546001600160a01b0386811660008181526007602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca9690604401600060405180830381600087803b1580156200285c57600080fd5b505af19250505080156200286e575060015b505b602a54602c546040516001624d3b8760e01b031981526001600160a01b039092169163ffb2c47991620028a99160040190815260200190565b600060405180830381600087803b158015620028c457600080fd5b505af1925050508015620028d6575060015b50846001600160a01b0316866001600160a01b03166000805160206200453d833981519152836040516200290c91815260200190565b60405180910390a35060019695505050505050565b6000620015d4828462003626565b6000620015d4828462003478565b602f805460ff19166001179055604080516002808252606082018352600092602083019080368337505060045482519293506001600160a01b0316918391506000906200298e576200298e62003640565b60200260200101906001600160a01b031690816001600160a01b0316815250503081600181518110620029c557620029c562003640565b60200260200101906001600160a01b031690816001600160a01b0316815250506000471162002a375760405162461bcd60e51b815260206004820152601860248201527f494e53554646494349454e545f57424e425f414d4f554e540000000000000000604482015260640162000b57565b60195460405163b6f9de9560e01b81526001600160a01b039091169063b6f9de9590859062002a72906000908690889042906004016200369c565b6000604051808303818588803b15801562002a8c57600080fd5b505af115801562002aa1573d6000803e3d6000fd5b5050602f805460ff19169055505050505050565b6006548111158062002adf57506001600160a01b0382166000908152600a602052604090205460ff165b62002b215760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b604482015260640162000b57565b5050565b601a546000906001600160a01b0316331480159062002b475750602f5460ff16155b801562002b565750602d5460ff165b8015620010fe575050602e5430600090815260076020526040902054101590565b602f805460ff19166001179055600d54601154602e5460009162002ba6916002916200182c918290876200244d565b9050600062002bc182602e546200292190919063ffffffff16565b6040805160028082526060820183529293506000929091602083019080368337019050509050308160008151811062002bfe5762002bfe62003640565b6001600160a01b03928316602091820292909201015260045482519116908290600190811062002c325762002c3262003640565b6001600160a01b03928316602091820292909201015260195460405163791ac94760e01b81524792919091169063791ac9479062002c7e908690600090879030904290600401620036d3565b600060405180830381600087803b15801562002c9957600080fd5b505af115801562002cae573d6000803e3d6000fd5b50505050600062002cc982476200292190919063ffffffff16565b9050600062002ce862002cde8860026200292f565b6011549062002921565b9050600062002d0060026200182c8481878d6200244d565b9050600062002d20836200182c601054876200244d90919063ffffffff16565b9050600062002d40846200182c600e54886200244d90919063ffffffff16565b600f549091501562002dd357600062002d6a856200182c600f54896200244d90919063ffffffff16565b9050602a60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801562002dbd57600080fd5b505af19350505050801562002dd0575060015b50505b6015546040516001600160a01b039091169083156108fc029084906000818181858888f1935050505015801562002e0e573d6000803e3d6000fd5b5060235460ff1662002e57576016546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801562002e55573d6000803e3d6000fd5b505b881562002f335760195460145460405163f305d71960e01b8152306004820152602481018c905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990859060c40160606040518083038185885af115801562002ecf573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062002ef6919062003711565b505060408051858152602081018c90527f424db2872186fa7e7afa7a5e902ed3b49a2ef19c2f5431e672462495dd6b450692500160405180910390a15b5050602f805460ff191690555050505050505050565b601a546000906001600160a01b0316331480159062002f6b5750602f5460ff16155b801562002f7a575060235460ff165b801562002f9857504360285460295462002f959190620034bb565b11155b8015620010fe57505060275447101590565b62002fba60275461dead6200293d565b4360295560275460265462002fcf916200243f565b6026819055602554101562002fe9576023805460ff191690555b565b601254601a5460009182916200302291906200182c906200301a906001600160a01b03898116911614620019db565b86906200244d565b306000908152600760205260409020549091506200304190826200243f565b30600081815260076020526040908190209290925590516001600160a01b038716906000805160206200453d83398151915290620030829085815260200190565b60405180910390a362003096838262002921565b95945050505050565b610dfc806200374183390190565b80358015158114620030be57600080fd5b919050565b60008060008060808587031215620030da57600080fd5b620030e585620030ad565b966020860135965060408601359560600135945092505050565b600080600080600060a086880312156200311857600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600060208083528351808285015260005b818110156200316a578581018301518582016040015282016200314c565b818111156200317d576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114620031a957600080fd5b50565b60008060408385031215620031c057600080fd5b8235620031cd8162003193565b946020939093013593505050565b60008060408385031215620031ef57600080fd5b50508035926020909101359150565b6000806000606084860312156200321457600080fd5b505081359360208301359350604090920135919050565b6000806000606084860312156200324157600080fd5b83356200324e8162003193565b92506020840135620032608162003193565b929592945050506040919091013590565b6000602082840312156200328457600080fd5b8135620015d48162003193565b600060208284031215620032a457600080fd5b5035919050565b60008060408385031215620032bf57600080fd5b8235620032cc8162003193565b9150620032dc60208401620030ad565b90509250929050565b600080600060608486031215620032fb57600080fd5b8335620033088162003193565b925060208401356200331a8162003193565b915060408401356200332c8162003193565b809150509250925092565b600080604083850312156200334b57600080fd5b8235620033588162003193565b915060208301356200336a8162003193565b809150509250929050565b600080604083850312156200338957600080fd5b620031cd83620030ad565b600060208284031215620033a757600080fd5b620015d482620030ad565b60008060408385031215620033c657600080fd5b82359150620032dc60208401620030ad565b60008060008060808587031215620033ef57600080fd5b8435620033fc8162003193565b935060208501356200340e8162003193565b92506040850135620034208162003193565b91506060850135620034328162003193565b939692955090935050565b6020808252600b908201526a085055551213d49256915160aa1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000826200349657634e487b7160e01b600052601260045260246000fd5b500490565b60208082526006908201526510a7aba722a960d11b604082015260600190565b60008219821115620034d157620034d162003462565b500190565b600181815b8085111562003517578160001904821115620034fb57620034fb62003462565b808516156200350957918102915b93841c9390800290620034db565b509250929050565b600082620035305750600162000e11565b816200353f5750600062000e11565b8160018114620035585760028114620035635762003583565b600191505062000e11565b60ff84111562003577576200357762003462565b50506001821b62000e11565b5060208310610133831016604e8410600b8410161715620035a8575081810a62000e11565b620035b48383620034d6565b8060001904821115620035cb57620035cb62003462565b029392505050565b6000620015d460ff8416836200351f565b600081600019048311821515161562003601576200360162003462565b500290565b6000602082840312156200361957600080fd5b8151620015d48162003193565b6000828210156200363b576200363b62003462565b500390565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015620036915781516001600160a01b0316875295820195908201906001016200366a565b509495945050505050565b848152608060208201526000620036b7608083018662003656565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a060408201526000620036f460a083018662003656565b6001600160a01b0394909416606083015250608001529392505050565b6000806000606084860312156200372757600080fd5b835192506020840151915060408401519050925092509256fe6080604052610e10600a55670de0b6b3a7640000600b5534801561002257600080fd5b50604051610dfc380380610dfc8339810160408190526100419161009b565b6001600160a01b038116610069577310ed43c718714eb63d5aa57b78b54704e256024e61006b565b805b600180546001600160a01b03929092166001600160a01b03199283161790556000805490911633179055506100cb565b6000602082840312156100ad57600080fd5b81516001600160a01b03811681146100c457600080fd5b9392505050565b610d22806100da6000396000f3fe6080604052600436106100c25760003560e01c8063ce7c2ac21161007f578063efca2eed11610059578063efca2eed146101f3578063f0fc6bca14610209578063ffb2c4791461021e578063ffd49c841461023e57600080fd5b8063ce7c2ac21461017e578063d0e30db0146101d5578063e2d2e219146101dd57600080fd5b806314b6ca96146100c757806328fd3198146100e95780632d48e8961461011c5780633a98ef391461013c5780634fab0ae814610152578063997664d714610168575b600080fd5b3480156100d357600080fd5b506100e76100e2366004610afc565b610254565b005b3480156100f557600080fd5b50610109610104366004610b26565b6103cc565b6040519081526020015b60405180910390f35b34801561012857600080fd5b506100e7610137366004610b41565b610457565b34801561014857600080fd5b5061010960065481565b34801561015e57600080fd5b50610109600b5481565b34801561017457600080fd5b5061010960075481565b34801561018a57600080fd5b506101ba610199366004610b26565b60056020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610113565b6100e7610479565b3480156101e957600080fd5b5061010960095481565b3480156101ff57600080fd5b5061010960085481565b34801561021557600080fd5b506100e76106e4565b34801561022a57600080fd5b506100e7610239366004610b63565b6106ef565b34801561024a57600080fd5b50610109600a5481565b6000546001600160a01b0316331461026b57600080fd5b6001600160a01b0382166000908152600560205260409020541561029257610292826107f3565b6000811180156102b857506001600160a01b038216600090815260056020526040902054155b1561031e57600280546001600160a01b0384166000818152600360205260408120839055600183018455929092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169091179055610351565b8015801561034357506001600160a01b03821660009081526005602052604090205415155b15610351576103518261091f565b6001600160a01b03821660009081526005602052604090205460065461038291839161037c91610a34565b90610a47565b6006556001600160a01b03821660009081526005602052604090208190556103a981610a53565b6001600160a01b0390921660009081526005602052604090206001019190915550565b6001600160a01b03811660009081526005602052604081205481036103f357506000919050565b6001600160a01b03821660009081526005602052604081205461041590610a53565b6001600160a01b038416600090815260056020526040902060010154909150808211610445575060009392505050565b61044f8282610a34565b949350505050565b6000546001600160a01b0316331461046e57600080fd5b600a91909155600b55565b6000546001600160a01b0316331461049057600080fd5b6040516370a0823160e01b815230600482015260009073e9e7cea3dedca5984780bafc599bd69add087d56906370a0823190602401602060405180830381865afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190610b7c565b604080516002808252606082018352929350600092909160208301908036833701905050905073bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c8160008151811061055457610554610b95565b60200260200101906001600160a01b031690816001600160a01b03168152505073e9e7cea3dedca5984780bafc599bd69add087d568160018151811061059c5761059c610b95565b6001600160a01b03928316602091820292909201015260015460405163b6f9de9560e01b815291169063b6f9de959034906105e290600a90869030904290600401610bab565b6000604051808303818588803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260009350610696925085915073e9e7cea3dedca5984780bafc599bd69add087d56906370a0823190602401602060405180830381865afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190610b7c565b90610a34565b6007549091506106a69082610a47565b6007556006546106dc906106d3906106cd6ec097ce7bc90715b34b9f100000000085610a83565b90610a8f565b60095490610a47565b600955505050565b6106ed336107f3565b565b6000546001600160a01b0316331461070657600080fd5b6002546000819003610716575050565b6000805a905060005b848310801561072d57508381105b156107ec5783600c5410610741576000600c555b6107736002600c548154811061075957610759610b95565b6000918252602090912001546001600160a01b0316610a9b565b156107aa576107aa6002600c548154811061079057610790610b95565b6000918252602090912001546001600160a01b03166107f3565b6107bf6107b85a8490610a34565b8490610a47565b92505a600c805491935060006107d483610c2b565b919050555080806107e490610c2b565b91505061071f565b5050505050565b6001600160a01b03811660009081526005602052604081205490036108155750565b6000610820826103cc565b9050801561091b576008546108359082610a47565b60085560405163a9059cbb60e01b81526001600160a01b03831660048201526024810182905273e9e7cea3dedca5984780bafc599bd69add087d569063a9059cbb906044016020604051808303816000875af1158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190610c44565b506001600160a01b038216600090815260046020908152604080832042905560059091529020600201546108f19082610a47565b6001600160a01b03831660009081526005602052604090206002810191909155546103a990610a53565b5050565b6002805461092f90600190610c66565b8154811061093f5761093f610b95565b60009182526020808320909101546001600160a01b038481168452600390925260409092205460028054929093169291811061097d5761097d610b95565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559183168152600391829052604081205460028054919392916109c990600190610c66565b815481106109d9576109d9610b95565b60009182526020808320909101546001600160a01b031683528201929092526040019020556002805480610a0f57610a0f610c7d565b600082815260209020810160001990810180546001600160a01b031916905501905550565b6000610a408284610c66565b9392505050565b6000610a408284610c93565b6000610a7d6ec097ce7bc90715b34b9f10000000006106cd60095485610a8390919063ffffffff16565b92915050565b6000610a408284610cab565b6000610a408284610cca565b600a546001600160a01b03821660009081526004602052604081205490914291610ac59190610c93565b108015610a7d5750600b54610ad9836103cc565b1192915050565b80356001600160a01b0381168114610af757600080fd5b919050565b60008060408385031215610b0f57600080fd5b610b1883610ae0565b946020939093013593505050565b600060208284031215610b3857600080fd5b610a4082610ae0565b60008060408385031215610b5457600080fd5b50508035926020909101359150565b600060208284031215610b7557600080fd5b5035919050565b600060208284031215610b8e57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060808201868352602060808185015281875180845260a086019150828901935060005b81811015610bf55784516001600160a01b031683529383019391830191600101610bd0565b50506001600160a01b039690961660408501525050506060015292915050565b634e487b7160e01b600052601160045260246000fd5b600060018201610c3d57610c3d610c15565b5060010190565b600060208284031215610c5657600080fd5b81518015158114610a4057600080fd5b600082821015610c7857610c78610c15565b500390565b634e487b7160e01b600052603160045260246000fd5b60008219821115610ca657610ca6610c15565b500190565b6000816000190483118215151615610cc557610cc5610c15565b500290565b600082610ce757634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c4a212772f60cf0820ffcd52634fdbdbec40851d137da8bca3999426f15a92ec64736f6c634300080d0033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122012f7b9985449dcc12242129e26dba52bb2235b11b2d23bec686b1dbcfef76c5d64736f6c634300080d0033";

    public static final String FUNC_MASK = "MASK";

    public static final String FUNC_WBNB = "WBNB";

    public static final String FUNC_WATT = "Watt";

    public static final String FUNC__MAXTXAMOUNT = "_maxTxAmount";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_APPROVEMAX = "approveMax";

    public static final String FUNC_AUTHORIZE = "authorize";

    public static final String FUNC_AUTOBUYBACKENABLED = "autoBuybackEnabled";

    public static final String FUNC_AUTOLIQUIDITYRECEIVER = "autoLiquidityReceiver";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BUYBACKFEERECEIVER = "buybackFeeReceiver";

    public static final String FUNC_CLEARBUYBACKMULTIPLIER = "clearBuybackMultiplier";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DISTRIBUTORADDRESS = "distributorAddress";

    public static final String FUNC_GETCIRCULATINGSUPPLY = "getCirculatingSupply";

    public static final String FUNC_GETMULTIPLIEDFEE = "getMultipliedFee";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETTOTALFEE = "getTotalFee";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISAUTHORIZED = "isAuthorized";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_LAUNCH = "launch";

    public static final String FUNC_LAUNCHEDAT = "launchedAt";

    public static final String FUNC_LAUNCHEDATTIMESTAMP = "launchedAtTimestamp";

    public static final String FUNC_MARKETINGFEERECEIVER = "marketingFeeReceiver";

    public static final String FUNC_MAXBUYAMOUNT = "maxBuyAmount";

    public static final String FUNC_MAXSELLAMOUNT = "maxSellAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NOMINATEPOTENTIALOWNER = "nominatePotentialOwner";

    public static final String FUNC_PAIR = "pair";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROUTER = "router";

    public static final String FUNC_SETAUTOBUYBACKSETTINGS = "setAutoBuybackSettings";

    public static final String FUNC_SETBUYBACKMULTIPLIERSETTINGS = "setBuybackMultiplierSettings";

    public static final String FUNC_SETDISTRIBUTIONCRITERIA = "setDistributionCriteria";

    public static final String FUNC_SETDISTRIBUTORSETTINGS = "setDistributorSettings";

    public static final String FUNC_SETFEERECEIVERS = "setFeeReceivers";

    public static final String FUNC_SETFEES = "setFees";

    public static final String FUNC_SETISAMLBLACKLISTED = "setIsAMLBlacklisted";

    public static final String FUNC_SETISDIVIDENDEXEMPT = "setIsDividendExempt";

    public static final String FUNC_SETISFEEEXEMPT = "setIsFeeExempt";

    public static final String FUNC_SETISTXLIMITEXEMPT = "setIsTxLimitExempt";

    public static final String FUNC_SETSWAPBACKSETTINGS = "setSwapBackSettings";

    public static final String FUNC_SETTARGETLIQUIDITY = "setTargetLiquidity";

    public static final String FUNC_SETTXLIMIT = "setTxLimit";

    public static final String FUNC_SWAPENABLED = "swapEnabled";

    public static final String FUNC_SWAPTHRESHOLD = "swapThreshold";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRIGGERZEUSBUYBACK = "triggerZeusBuyback";

    public static final String FUNC_UNAUTHORIZE = "unauthorize";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUTHORIZE_EVENT = new Event("Authorize", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event AUTOLIQUIFY_EVENT = new Event("AutoLiquify", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BUYBACKMULTIPLIERACTIVE_EVENT = new Event("BuybackMultiplierActive", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event CLEARBUYBACKMULTIPLIER_EVENT = new Event("ClearBuybackMultiplier", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event LAUNCH_EVENT = new Event("Launch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERNOMINATED_EVENT = new Event("OwnerNominated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETAUTOBUYBACKSETTINGS_EVENT = new Event("SetAutoBuybackSettings", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETBUYBACKMULTIPLIERSETTINGS_EVENT = new Event("SetBuybackMultiplierSettings", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETDISTRIBUTORSETTINGS_EVENT = new Event("SetDistributorSettings", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SETFEERECEIVERS_EVENT = new Event("SetFeeReceivers", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SETFEES_EVENT = new Event("SetFees", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETISAMLBLACKLISTED_EVENT = new Event("SetIsAMLBlacklisted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETISDIVIDENDEXEMPT_EVENT = new Event("SetIsDividendExempt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETISFEEEXEMPT_EVENT = new Event("SetIsFeeExempt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETISTXLIMITEXEMPT_EVENT = new Event("SetIsTxLimitExempt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETSWAPBACKSETTINGS_EVENT = new Event("SetSwapBackSettings", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETTARGETLIQUIDITY_EVENT = new Event("SetTargetLiquidity", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETTXLIMIT_EVENT = new Event("SetTxLimit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRIGGERZEUSBUYBACK_EVENT = new Event("TriggerZeusBuyback", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected NDBcoin(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NDBcoin(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NDBcoin(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NDBcoin(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<AuthorizeEventResponse> getAuthorizeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(AUTHORIZE_EVENT, transactionReceipt);
        ArrayList<AuthorizeEventResponse> responses = new ArrayList<AuthorizeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuthorizeEventResponse typedResponse = new AuthorizeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.adr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AuthorizeEventResponse> authorizeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AuthorizeEventResponse>() {
            @Override
            public AuthorizeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUTHORIZE_EVENT, log);
                AuthorizeEventResponse typedResponse = new AuthorizeEventResponse();
                typedResponse.log = log;
                typedResponse.adr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AuthorizeEventResponse> authorizeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUTHORIZE_EVENT));
        return authorizeEventFlowable(filter);
    }

    public List<AutoLiquifyEventResponse> getAutoLiquifyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(AUTOLIQUIFY_EVENT, transactionReceipt);
        ArrayList<AutoLiquifyEventResponse> responses = new ArrayList<AutoLiquifyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AutoLiquifyEventResponse typedResponse = new AutoLiquifyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amountBNB = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amountNDB = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AutoLiquifyEventResponse> autoLiquifyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AutoLiquifyEventResponse>() {
            @Override
            public AutoLiquifyEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUTOLIQUIFY_EVENT, log);
                AutoLiquifyEventResponse typedResponse = new AutoLiquifyEventResponse();
                typedResponse.log = log;
                typedResponse.amountBNB = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amountNDB = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AutoLiquifyEventResponse> autoLiquifyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUTOLIQUIFY_EVENT));
        return autoLiquifyEventFlowable(filter);
    }

    public List<BuybackMultiplierActiveEventResponse> getBuybackMultiplierActiveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BUYBACKMULTIPLIERACTIVE_EVENT, transactionReceipt);
        ArrayList<BuybackMultiplierActiveEventResponse> responses = new ArrayList<BuybackMultiplierActiveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BuybackMultiplierActiveEventResponse typedResponse = new BuybackMultiplierActiveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.duration = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BuybackMultiplierActiveEventResponse> buybackMultiplierActiveEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BuybackMultiplierActiveEventResponse>() {
            @Override
            public BuybackMultiplierActiveEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BUYBACKMULTIPLIERACTIVE_EVENT, log);
                BuybackMultiplierActiveEventResponse typedResponse = new BuybackMultiplierActiveEventResponse();
                typedResponse.log = log;
                typedResponse.duration = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BuybackMultiplierActiveEventResponse> buybackMultiplierActiveEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BUYBACKMULTIPLIERACTIVE_EVENT));
        return buybackMultiplierActiveEventFlowable(filter);
    }

    public List<ClearBuybackMultiplierEventResponse> getClearBuybackMultiplierEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLEARBUYBACKMULTIPLIER_EVENT, transactionReceipt);
        ArrayList<ClearBuybackMultiplierEventResponse> responses = new ArrayList<ClearBuybackMultiplierEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClearBuybackMultiplierEventResponse typedResponse = new ClearBuybackMultiplierEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buybackMultiplierTriggeredAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClearBuybackMultiplierEventResponse> clearBuybackMultiplierEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ClearBuybackMultiplierEventResponse>() {
            @Override
            public ClearBuybackMultiplierEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLEARBUYBACKMULTIPLIER_EVENT, log);
                ClearBuybackMultiplierEventResponse typedResponse = new ClearBuybackMultiplierEventResponse();
                typedResponse.log = log;
                typedResponse.buybackMultiplierTriggeredAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClearBuybackMultiplierEventResponse> clearBuybackMultiplierEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLEARBUYBACKMULTIPLIER_EVENT));
        return clearBuybackMultiplierEventFlowable(filter);
    }

    public List<LaunchEventResponse> getLaunchEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LAUNCH_EVENT, transactionReceipt);
        ArrayList<LaunchEventResponse> responses = new ArrayList<LaunchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LaunchEventResponse typedResponse = new LaunchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.launchedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.launchedAtTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LaunchEventResponse> launchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LaunchEventResponse>() {
            @Override
            public LaunchEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LAUNCH_EVENT, log);
                LaunchEventResponse typedResponse = new LaunchEventResponse();
                typedResponse.log = log;
                typedResponse.launchedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.launchedAtTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LaunchEventResponse> launchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LAUNCH_EVENT));
        return launchEventFlowable(filter);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.prevOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnerChangedEventResponse> ownerChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnerChangedEventResponse>() {
            @Override
            public OwnerChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERCHANGED_EVENT, log);
                OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
                typedResponse.log = log;
                typedResponse.prevOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnerChangedEventResponse> ownerChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERCHANGED_EVENT));
        return ownerChangedEventFlowable(filter);
    }

    public List<OwnerNominatedEventResponse> getOwnerNominatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERNOMINATED_EVENT, transactionReceipt);
        ArrayList<OwnerNominatedEventResponse> responses = new ArrayList<OwnerNominatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerNominatedEventResponse typedResponse = new OwnerNominatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnerNominatedEventResponse> ownerNominatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnerNominatedEventResponse>() {
            @Override
            public OwnerNominatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERNOMINATED_EVENT, log);
                OwnerNominatedEventResponse typedResponse = new OwnerNominatedEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnerNominatedEventResponse> ownerNominatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERNOMINATED_EVENT));
        return ownerNominatedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.prevOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.prevOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SetAutoBuybackSettingsEventResponse> getSetAutoBuybackSettingsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETAUTOBUYBACKSETTINGS_EVENT, transactionReceipt);
        ArrayList<SetAutoBuybackSettingsEventResponse> responses = new ArrayList<SetAutoBuybackSettingsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetAutoBuybackSettingsEventResponse typedResponse = new SetAutoBuybackSettingsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._cap = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._period = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetAutoBuybackSettingsEventResponse> setAutoBuybackSettingsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetAutoBuybackSettingsEventResponse>() {
            @Override
            public SetAutoBuybackSettingsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETAUTOBUYBACKSETTINGS_EVENT, log);
                SetAutoBuybackSettingsEventResponse typedResponse = new SetAutoBuybackSettingsEventResponse();
                typedResponse.log = log;
                typedResponse._enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._cap = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._period = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetAutoBuybackSettingsEventResponse> setAutoBuybackSettingsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETAUTOBUYBACKSETTINGS_EVENT));
        return setAutoBuybackSettingsEventFlowable(filter);
    }

    public List<SetBuybackMultiplierSettingsEventResponse> getSetBuybackMultiplierSettingsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETBUYBACKMULTIPLIERSETTINGS_EVENT, transactionReceipt);
        ArrayList<SetBuybackMultiplierSettingsEventResponse> responses = new ArrayList<SetBuybackMultiplierSettingsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetBuybackMultiplierSettingsEventResponse typedResponse = new SetBuybackMultiplierSettingsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.numerator = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.denominator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetBuybackMultiplierSettingsEventResponse> setBuybackMultiplierSettingsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetBuybackMultiplierSettingsEventResponse>() {
            @Override
            public SetBuybackMultiplierSettingsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETBUYBACKMULTIPLIERSETTINGS_EVENT, log);
                SetBuybackMultiplierSettingsEventResponse typedResponse = new SetBuybackMultiplierSettingsEventResponse();
                typedResponse.log = log;
                typedResponse.numerator = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.denominator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetBuybackMultiplierSettingsEventResponse> setBuybackMultiplierSettingsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETBUYBACKMULTIPLIERSETTINGS_EVENT));
        return setBuybackMultiplierSettingsEventFlowable(filter);
    }

    public List<SetDistributorSettingsEventResponse> getSetDistributorSettingsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETDISTRIBUTORSETTINGS_EVENT, transactionReceipt);
        ArrayList<SetDistributorSettingsEventResponse> responses = new ArrayList<SetDistributorSettingsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetDistributorSettingsEventResponse typedResponse = new SetDistributorSettingsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gas = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetDistributorSettingsEventResponse> setDistributorSettingsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetDistributorSettingsEventResponse>() {
            @Override
            public SetDistributorSettingsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETDISTRIBUTORSETTINGS_EVENT, log);
                SetDistributorSettingsEventResponse typedResponse = new SetDistributorSettingsEventResponse();
                typedResponse.log = log;
                typedResponse.gas = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetDistributorSettingsEventResponse> setDistributorSettingsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETDISTRIBUTORSETTINGS_EVENT));
        return setDistributorSettingsEventFlowable(filter);
    }

    public List<SetFeeReceiversEventResponse> getSetFeeReceiversEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETFEERECEIVERS_EVENT, transactionReceipt);
        ArrayList<SetFeeReceiversEventResponse> responses = new ArrayList<SetFeeReceiversEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetFeeReceiversEventResponse typedResponse = new SetFeeReceiversEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._autoLiquidityReceiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._marketingFeeReceiver = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._buybackFeeReceiver = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetFeeReceiversEventResponse> setFeeReceiversEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetFeeReceiversEventResponse>() {
            @Override
            public SetFeeReceiversEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETFEERECEIVERS_EVENT, log);
                SetFeeReceiversEventResponse typedResponse = new SetFeeReceiversEventResponse();
                typedResponse.log = log;
                typedResponse._autoLiquidityReceiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._marketingFeeReceiver = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._buybackFeeReceiver = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetFeeReceiversEventResponse> setFeeReceiversEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETFEERECEIVERS_EVENT));
        return setFeeReceiversEventFlowable(filter);
    }

    public List<SetFeesEventResponse> getSetFeesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETFEES_EVENT, transactionReceipt);
        ArrayList<SetFeesEventResponse> responses = new ArrayList<SetFeesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetFeesEventResponse typedResponse = new SetFeesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._liquidityFee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._buybackFee = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._reflectionFee = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._marketingFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._feeDenominator = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetFeesEventResponse> setFeesEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetFeesEventResponse>() {
            @Override
            public SetFeesEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETFEES_EVENT, log);
                SetFeesEventResponse typedResponse = new SetFeesEventResponse();
                typedResponse.log = log;
                typedResponse._liquidityFee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._buybackFee = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._reflectionFee = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._marketingFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._feeDenominator = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetFeesEventResponse> setFeesEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETFEES_EVENT));
        return setFeesEventFlowable(filter);
    }

    public List<SetIsAMLBlacklistedEventResponse> getSetIsAMLBlacklistedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETISAMLBLACKLISTED_EVENT, transactionReceipt);
        ArrayList<SetIsAMLBlacklistedEventResponse> responses = new ArrayList<SetIsAMLBlacklistedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetIsAMLBlacklistedEventResponse typedResponse = new SetIsAMLBlacklistedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetIsAMLBlacklistedEventResponse> setIsAMLBlacklistedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetIsAMLBlacklistedEventResponse>() {
            @Override
            public SetIsAMLBlacklistedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETISAMLBLACKLISTED_EVENT, log);
                SetIsAMLBlacklistedEventResponse typedResponse = new SetIsAMLBlacklistedEventResponse();
                typedResponse.log = log;
                typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetIsAMLBlacklistedEventResponse> setIsAMLBlacklistedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETISAMLBLACKLISTED_EVENT));
        return setIsAMLBlacklistedEventFlowable(filter);
    }

    public List<SetIsDividendExemptEventResponse> getSetIsDividendExemptEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETISDIVIDENDEXEMPT_EVENT, transactionReceipt);
        ArrayList<SetIsDividendExemptEventResponse> responses = new ArrayList<SetIsDividendExemptEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetIsDividendExemptEventResponse typedResponse = new SetIsDividendExemptEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetIsDividendExemptEventResponse> setIsDividendExemptEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetIsDividendExemptEventResponse>() {
            @Override
            public SetIsDividendExemptEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETISDIVIDENDEXEMPT_EVENT, log);
                SetIsDividendExemptEventResponse typedResponse = new SetIsDividendExemptEventResponse();
                typedResponse.log = log;
                typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetIsDividendExemptEventResponse> setIsDividendExemptEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETISDIVIDENDEXEMPT_EVENT));
        return setIsDividendExemptEventFlowable(filter);
    }

    public List<SetIsFeeExemptEventResponse> getSetIsFeeExemptEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETISFEEEXEMPT_EVENT, transactionReceipt);
        ArrayList<SetIsFeeExemptEventResponse> responses = new ArrayList<SetIsFeeExemptEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetIsFeeExemptEventResponse typedResponse = new SetIsFeeExemptEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetIsFeeExemptEventResponse> setIsFeeExemptEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetIsFeeExemptEventResponse>() {
            @Override
            public SetIsFeeExemptEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETISFEEEXEMPT_EVENT, log);
                SetIsFeeExemptEventResponse typedResponse = new SetIsFeeExemptEventResponse();
                typedResponse.log = log;
                typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetIsFeeExemptEventResponse> setIsFeeExemptEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETISFEEEXEMPT_EVENT));
        return setIsFeeExemptEventFlowable(filter);
    }

    public List<SetIsTxLimitExemptEventResponse> getSetIsTxLimitExemptEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETISTXLIMITEXEMPT_EVENT, transactionReceipt);
        ArrayList<SetIsTxLimitExemptEventResponse> responses = new ArrayList<SetIsTxLimitExemptEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetIsTxLimitExemptEventResponse typedResponse = new SetIsTxLimitExemptEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetIsTxLimitExemptEventResponse> setIsTxLimitExemptEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetIsTxLimitExemptEventResponse>() {
            @Override
            public SetIsTxLimitExemptEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETISTXLIMITEXEMPT_EVENT, log);
                SetIsTxLimitExemptEventResponse typedResponse = new SetIsTxLimitExemptEventResponse();
                typedResponse.log = log;
                typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetIsTxLimitExemptEventResponse> setIsTxLimitExemptEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETISTXLIMITEXEMPT_EVENT));
        return setIsTxLimitExemptEventFlowable(filter);
    }

    public List<SetSwapBackSettingsEventResponse> getSetSwapBackSettingsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETSWAPBACKSETTINGS_EVENT, transactionReceipt);
        ArrayList<SetSwapBackSettingsEventResponse> responses = new ArrayList<SetSwapBackSettingsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetSwapBackSettingsEventResponse typedResponse = new SetSwapBackSettingsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetSwapBackSettingsEventResponse> setSwapBackSettingsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetSwapBackSettingsEventResponse>() {
            @Override
            public SetSwapBackSettingsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETSWAPBACKSETTINGS_EVENT, log);
                SetSwapBackSettingsEventResponse typedResponse = new SetSwapBackSettingsEventResponse();
                typedResponse.log = log;
                typedResponse._enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetSwapBackSettingsEventResponse> setSwapBackSettingsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETSWAPBACKSETTINGS_EVENT));
        return setSwapBackSettingsEventFlowable(filter);
    }

    public List<SetTargetLiquidityEventResponse> getSetTargetLiquidityEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTARGETLIQUIDITY_EVENT, transactionReceipt);
        ArrayList<SetTargetLiquidityEventResponse> responses = new ArrayList<SetTargetLiquidityEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetTargetLiquidityEventResponse typedResponse = new SetTargetLiquidityEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._target = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._denominator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetTargetLiquidityEventResponse> setTargetLiquidityEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetTargetLiquidityEventResponse>() {
            @Override
            public SetTargetLiquidityEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTARGETLIQUIDITY_EVENT, log);
                SetTargetLiquidityEventResponse typedResponse = new SetTargetLiquidityEventResponse();
                typedResponse.log = log;
                typedResponse._target = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._denominator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetTargetLiquidityEventResponse> setTargetLiquidityEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTARGETLIQUIDITY_EVENT));
        return setTargetLiquidityEventFlowable(filter);
    }

    public List<SetTxLimitEventResponse> getSetTxLimitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTXLIMIT_EVENT, transactionReceipt);
        ArrayList<SetTxLimitEventResponse> responses = new ArrayList<SetTxLimitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetTxLimitEventResponse typedResponse = new SetTxLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetTxLimitEventResponse> setTxLimitEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetTxLimitEventResponse>() {
            @Override
            public SetTxLimitEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTXLIMIT_EVENT, log);
                SetTxLimitEventResponse typedResponse = new SetTxLimitEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetTxLimitEventResponse> setTxLimitEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTXLIMIT_EVENT));
        return setTxLimitEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<TriggerZeusBuybackEventResponse> getTriggerZeusBuybackEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRIGGERZEUSBUYBACK_EVENT, transactionReceipt);
        ArrayList<TriggerZeusBuybackEventResponse> responses = new ArrayList<TriggerZeusBuybackEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TriggerZeusBuybackEventResponse typedResponse = new TriggerZeusBuybackEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.triggerBuybackMultiplier = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TriggerZeusBuybackEventResponse> triggerZeusBuybackEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TriggerZeusBuybackEventResponse>() {
            @Override
            public TriggerZeusBuybackEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRIGGERZEUSBUYBACK_EVENT, log);
                TriggerZeusBuybackEventResponse typedResponse = new TriggerZeusBuybackEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.triggerBuybackMultiplier = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TriggerZeusBuybackEventResponse> triggerZeusBuybackEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRIGGERZEUSBUYBACK_EVENT));
        return triggerZeusBuybackEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> MASK() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> WBNB() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WBNB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> Watt() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WATT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> _maxTxAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__MAXTXAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCEPTOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> allowance(String holder, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, holder), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approveMax(String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVEMAX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> authorize(String adr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AUTHORIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, adr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> autoBuybackEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AUTOBUYBACKENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> autoLiquidityReceiver() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AUTOLIQUIDITYRECEIVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> buybackFeeReceiver() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BUYBACKFEERECEIVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> clearBuybackMultiplier() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEARBUYBACKMULTIPLIER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> distributorAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DISTRIBUTORADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getCirculatingSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCIRCULATINGSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getMultipliedFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMULTIPLIEDFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalFee(Boolean selling) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTALFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(selling)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _dexRouter, String _marketing, String _buyback, String _votlamond) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _dexRouter), 
                new org.web3j.abi.datatypes.Address(160, _marketing), 
                new org.web3j.abi.datatypes.Address(160, _buyback), 
                new org.web3j.abi.datatypes.Address(160, _votlamond)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isAuthorized(String adr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAUTHORIZED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, adr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> launch() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LAUNCH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> launchedAt() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LAUNCHEDAT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> launchedAtTimestamp() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LAUNCHEDATTIMESTAMP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> marketingFeeReceiver() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MARKETINGFEERECEIVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> maxBuyAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXBUYAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> maxSellAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXSELLAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> nominatePotentialOwner(String _owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NOMINATEPOTENTIALOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> pair() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAIR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> router() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROUTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setAutoBuybackSettings(Boolean _enabled, BigInteger _cap, BigInteger _amount, BigInteger _period) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAUTOBUYBACKSETTINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_enabled), 
                new org.web3j.abi.datatypes.generated.Uint256(_cap), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.generated.Uint256(_period)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBuybackMultiplierSettings(BigInteger numerator, BigInteger denominator, BigInteger length) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBUYBACKMULTIPLIERSETTINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(numerator), 
                new org.web3j.abi.datatypes.generated.Uint256(denominator), 
                new org.web3j.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDistributionCriteria(BigInteger _minPeriod, BigInteger _minDistribution) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDISTRIBUTIONCRITERIA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_minPeriod), 
                new org.web3j.abi.datatypes.generated.Uint256(_minDistribution)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDistributorSettings(BigInteger gas) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDISTRIBUTORSETTINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeReceivers(String _autoLiquidityReceiver, String _marketingFeeReceiver, String _buybackFeeReceiver) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFEERECEIVERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _autoLiquidityReceiver), 
                new org.web3j.abi.datatypes.Address(160, _marketingFeeReceiver), 
                new org.web3j.abi.datatypes.Address(160, _buybackFeeReceiver)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFees(BigInteger _liquidityFee, BigInteger _buybackFee, BigInteger _reflectionFee, BigInteger _marketingFee, BigInteger _feeDenominator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFEES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_liquidityFee), 
                new org.web3j.abi.datatypes.generated.Uint256(_buybackFee), 
                new org.web3j.abi.datatypes.generated.Uint256(_reflectionFee), 
                new org.web3j.abi.datatypes.generated.Uint256(_marketingFee), 
                new org.web3j.abi.datatypes.generated.Uint256(_feeDenominator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setIsAMLBlacklisted(String holder, Boolean status) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETISAMLBLACKLISTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, holder), 
                new org.web3j.abi.datatypes.Bool(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setIsDividendExempt(String holder, Boolean exempt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETISDIVIDENDEXEMPT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, holder), 
                new org.web3j.abi.datatypes.Bool(exempt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setIsFeeExempt(String holder, Boolean exempt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETISFEEEXEMPT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, holder), 
                new org.web3j.abi.datatypes.Bool(exempt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setIsTxLimitExempt(String holder, Boolean exempt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETISTXLIMITEXEMPT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, holder), 
                new org.web3j.abi.datatypes.Bool(exempt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSwapBackSettings(Boolean _enabled, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSWAPBACKSETTINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_enabled), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTargetLiquidity(BigInteger _target, BigInteger _denominator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTARGETLIQUIDITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_target), 
                new org.web3j.abi.datatypes.generated.Uint256(_denominator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTxLimit(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTXLIMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> swapEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SWAPENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> swapThreshold() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SWAPTHRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String sender, String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender), 
                new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> triggerZeusBuyback(BigInteger amount, Boolean triggerBuybackMultiplier) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRIGGERZEUSBUYBACK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Bool(triggerBuybackMultiplier)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unauthorize(String adr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNAUTHORIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, adr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static NDBcoin load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NDBcoin(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NDBcoin load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NDBcoin(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NDBcoin load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NDBcoin(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NDBcoin load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NDBcoin(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NDBcoin> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NDBcoin.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NDBcoin> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NDBcoin.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<NDBcoin> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NDBcoin.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NDBcoin> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NDBcoin.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class AuthorizeEventResponse extends BaseEventResponse {
        public String adr;

        public Boolean status;
    }

    public static class AutoLiquifyEventResponse extends BaseEventResponse {
        public BigInteger amountBNB;

        public BigInteger amountNDB;
    }

    public static class BuybackMultiplierActiveEventResponse extends BaseEventResponse {
        public BigInteger duration;
    }

    public static class ClearBuybackMultiplierEventResponse extends BaseEventResponse {
        public BigInteger buybackMultiplierTriggeredAt;
    }

    public static class LaunchEventResponse extends BaseEventResponse {
        public BigInteger launchedAt;

        public BigInteger launchedAtTimestamp;
    }

    public static class OwnerChangedEventResponse extends BaseEventResponse {
        public String prevOwner;

        public String newOwner;
    }

    public static class OwnerNominatedEventResponse extends BaseEventResponse {
        public String owner;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String prevOwner;

        public String newOwner;
    }

    public static class SetAutoBuybackSettingsEventResponse extends BaseEventResponse {
        public Boolean _enabled;

        public BigInteger _cap;

        public BigInteger _amount;

        public BigInteger _period;
    }

    public static class SetBuybackMultiplierSettingsEventResponse extends BaseEventResponse {
        public BigInteger numerator;

        public BigInteger denominator;

        public BigInteger length;
    }

    public static class SetDistributorSettingsEventResponse extends BaseEventResponse {
        public BigInteger gas;
    }

    public static class SetFeeReceiversEventResponse extends BaseEventResponse {
        public String _autoLiquidityReceiver;

        public String _marketingFeeReceiver;

        public String _buybackFeeReceiver;
    }

    public static class SetFeesEventResponse extends BaseEventResponse {
        public BigInteger _liquidityFee;

        public BigInteger _buybackFee;

        public BigInteger _reflectionFee;

        public BigInteger _marketingFee;

        public BigInteger _feeDenominator;
    }

    public static class SetIsAMLBlacklistedEventResponse extends BaseEventResponse {
        public String holder;

        public Boolean status;
    }

    public static class SetIsDividendExemptEventResponse extends BaseEventResponse {
        public String holder;

        public Boolean exempt;
    }

    public static class SetIsFeeExemptEventResponse extends BaseEventResponse {
        public String holder;

        public Boolean exempt;
    }

    public static class SetIsTxLimitExemptEventResponse extends BaseEventResponse {
        public String holder;

        public Boolean exempt;
    }

    public static class SetSwapBackSettingsEventResponse extends BaseEventResponse {
        public Boolean _enabled;

        public BigInteger _amount;
    }

    public static class SetTargetLiquidityEventResponse extends BaseEventResponse {
        public BigInteger _target;

        public BigInteger _denominator;
    }

    public static class SetTxLimitEventResponse extends BaseEventResponse {
        public BigInteger amount;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class TriggerZeusBuybackEventResponse extends BaseEventResponse {
        public BigInteger amount;

        public Boolean triggerBuybackMultiplier;
    }
}
