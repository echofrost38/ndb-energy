extend type Query {
    getBalances : [BalancePayload]
    
    # Get Coinpayment Transaction for Deposit
    getCoinpaymentDepositTx(
        orderBy: String
    ) : [CoinpaymentWalletTransaction]
    getCoinpaymentDepositTxByUser(
        orderBy: String,
        showStatus: Int
    ) : [CoinpaymentWalletTransaction]
    getCoinpaymentDepositTxByAdmin(
        userId: Int,
        orderBy: String
    ) : [CoinpaymentWalletTransaction]
    getCoinpaymentDepositTxById(
        id: Int,
        showStatus: Int
    ) : CoinpaymentWalletTransaction

    # Get Stripe Transaction for deposit
    getStripeDepositTx(
        orderBy: String
    ) : [StripeDepositTransaction]
    getStripeDepositTxByUser(
        orderBy: String,
        showStatus: Int
    ) : [StripeDepositTransaction]
    getStripeDepositTxByAdmin(
        userId: Int,
        orderBy: String
    ) : [StripeDepositTransaction]
    getStripeDepositTxById(
        id: Int,
        showStatus: Int
    ) : StripeDepositTransaction
}

extend type Mutation {
    createChargeForDeposit(
        coin: String,
        network: String,
        cryptoType: String
    ) : CoinpaymentWalletTransaction
    changeCoinpaymentDepositShowStatus(
        id: Int,
        showStatus: Int
    ) : Int
#    withdrawCrypto(
#        to: String,
#        amount: Float,
#        tokenSymbol: String
#    ) : Boolean
    depositWithPlaid : String
    plaidExchangeToken(
        publicToken: String
    ): String
}

schema {
    query: Query,
    mutation: Mutation
}